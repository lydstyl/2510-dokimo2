// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model (for now just one user, auth via env)
model User {
  id         String     @id @default(cuid())
  email      String     @unique
  password   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  landlords  Landlord[]
}

// Landlord can be a natural person or legal entity (SCI)
model Landlord {
  id             String     @id @default(cuid())
  name           String
  type           String     // "NATURAL_PERSON" or "LEGAL_ENTITY"
  address        String
  email          String?
  phone          String?
  siret          String?    // for legal entities
  managerName    String?    // for legal entities - name of the manager
  managerEmail   String?    // for legal entities - manager's email
  managerPhone   String?    // for legal entities - manager's phone
  userId         String
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  properties     Property[]

  @@index([userId])
}

// Building - groups multiple properties (e.g., apartment building)
// A property without a buildingId is its own group (e.g., standalone house)
model Building {
  id                 String              @id @default(cuid())
  name               String              // e.g., "Immeuble 123 Rue de Paris"
  address            String
  postalCode         String
  city               String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  properties         Property[]
  financialDocuments FinancialDocument[]

  @@index([name])
}

// Property (apartment, house, garage, etc.)
model Property {
  id                    String                 @id @default(cuid())
  name                  String
  type                  String                 // "APARTMENT", "HOUSE", "GARAGE", etc.
  address               String
  postalCode            String
  city                  String
  landlordId            String
  landlord              Landlord               @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  buildingId            String?                // optional - if null, property is standalone
  building              Building?              @relation(fields: [buildingId], references: [id], onDelete: SetNull)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  leases                Lease[]
  boilers               Boiler[]
  insuranceCertificates InsuranceCertificate[]
  waterMeterReadings    WaterMeterReading[]
  chargeShares          PropertyChargeShare[]
  inventories           Inventory[]

  @@index([landlordId])
  @@index([buildingId])
}

// Tenant
model Tenant {
  id        String   @id @default(cuid())
  civility  String?  // "M." or "Mme" (Monsieur or Madame)
  firstName String
  lastName  String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  leases    Lease[]
}

// Lease - links property and tenant
model Lease {
  id            String    @id @default(cuid())
  propertyId    String
  property      Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  startDate     DateTime
  endDate       DateTime?
  rentAmount    Float     // rent excluding charges
  chargesAmount Float     // charges
  paymentDueDay Int       // day of month when payment is due (1-31)
  irlQuarter    String?   // IRL quarter reference (e.g., "T1", "T2", "T3", "T4" or "1er", "2e", "3e", "4e")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  payments      Payment[]
  rentRevisions RentRevision[]
  inventories   Inventory[]

  @@index([propertyId])
  @@index([tenantId])
}

// Payment
model Payment {
  id          String   @id @default(cuid())
  leaseId     String
  lease       Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  amount      Float
  paymentDate DateTime
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([leaseId])
  @@index([paymentDate])
}

// RentRevision - track changes to rent over time
model RentRevision {
  id            String   @id @default(cuid())
  leaseId       String
  lease         Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  effectiveDate DateTime
  rentAmount    Float
  chargesAmount Float
  reason        String?  // e.g., "IRL_REVISION", "AGREEMENT", etc.
  createdAt     DateTime @default(now())

  @@index([leaseId])
  @@index([effectiveDate])
}

// Boiler - heating system linked to a property
model Boiler {
  id               String              @id @default(cuid())
  propertyId       String
  property         Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  name             String?             // optional name for the boiler
  notes            String?             // optional notes about the boiler
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  maintenances     BoilerMaintenance[]

  @@index([propertyId])
}

// BoilerMaintenance - maintenance record for a boiler
model BoilerMaintenance {
  id               String   @id @default(cuid())
  boilerId         String
  boiler           Boiler   @relation(fields: [boilerId], references: [id], onDelete: Cascade)
  maintenanceDate  DateTime
  documentPath     String?  // optional path to PDF or image file
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([boilerId])
  @@index([maintenanceDate])
}

// InsuranceCertificate - home insurance certificate for a property
model InsuranceCertificate {
  id           String   @id @default(cuid())
  propertyId   String
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  startDate    DateTime
  endDate      DateTime? // optional end date
  documentPath String?   // optional path to PDF or image file
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([propertyId])
  @@index([startDate])
  @@index([endDate])
}

// WaterMeterReading - water meter reading for a property
model WaterMeterReading {
  id           String   @id @default(cuid())
  propertyId   String
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  readingDate  DateTime
  meterReading Float    // meter reading in cubic meters (m³)
  documentPath String?  // optional path to PDF or image file
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([propertyId])
  @@index([readingDate])
}

// FinancialDocument - bills, taxes, invoices linked to a building
model FinancialDocument {
  id                 String   @id @default(cuid())
  buildingId         String
  building           Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  category           String   // ELECTRICITY, WATER, CLEANING, GARBAGE_TAX, PROPERTY_TAX, MAINTENANCE_WORK, etc.
  date               DateTime
  amount             Float    // amount in euros
  description        String
  documentPath       String?  // optional path to PDF or image file
  includedInCharges  Boolean  @default(true) // if false, document is archived but not in charge calculation
  waterConsumption   Float?   // for WATER category only - consumption in m³
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([buildingId])
  @@index([category])
  @@index([date])
  @@index([includedInCharges])
}

// PropertyChargeShare - defines percentage share of charges per property per category
model PropertyChargeShare {
  id         String   @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  category   String   // matches FinancialDocument category
  percentage Float    // percentage to pay (0-100), e.g., 25 means 25%
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([propertyId, category]) // one percentage per property per category
  @@index([propertyId])
  @@index([category])
}

// InventoryTemplate - reusable template for property inventories
model InventoryTemplate {
  id          String                  @id @default(cuid())
  name        String                  // e.g., "Appartement T3 standard"
  description String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  items       InventoryTemplateItem[]
  inventories Inventory[]

  @@index([name])
}

// InventoryTemplateItem - room or item in template
model InventoryTemplateItem {
  id         String            @id @default(cuid())
  templateId String
  template   InventoryTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  type       String            // "ROOM" or "ITEM"
  name       String            // e.g., "Salle de bain", "Balcon"
  order      Int               @default(0) // for ordering items
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([templateId])
  @@index([order])
}

// Inventory - actual property inventory (entry or exit)
model Inventory {
  id          String                @id @default(cuid())
  propertyId  String
  property    Property              @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  leaseId     String?
  lease       Lease?                @relation(fields: [leaseId], references: [id], onDelete: SetNull)
  templateId  String?
  template    InventoryTemplate?    @relation(fields: [templateId], references: [id], onDelete: SetNull)
  type        String                // "ENTRY" or "EXIT"
  date        DateTime
  notes       String?               // general notes
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  assessments InventoryAssessment[]

  @@index([propertyId])
  @@index([leaseId])
  @@index([type])
  @@index([date])
}

// InventoryAssessment - assessment of room/item aspect
model InventoryAssessment {
  id          String    @id @default(cuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  itemName    String    // room or item name (e.g., "Salle de bain")
  aspect      String    // e.g., "FLOOR", "WALLS", "CEILING", "WINDOWS", "DOORS", "ELECTRICITY", "WATER", "GENERAL"
  condition   String    // "B" (bon), "TB" (très bon), "M" (mauvais), "TM" (très mauvais)
  comments    String?   // optional comments
  photoPath   String?   // optional photo
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([inventoryId])
  @@index([itemName])
}

// Add relation to Lease for inventories
// Update Lease model to include inventories

